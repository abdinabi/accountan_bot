import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import asyncpg
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# ==== –ö–ù–û–ü–ö–ò ====
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí∞ –î–æ—Ö–æ–¥"), KeyboardButton(text="üí∏ –†–∞—Å—Ö–æ–¥")],
        [KeyboardButton(text="üìä –ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="üóì –û—Å—Ç–∞—Ç–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º")]
    ],
    resize_keyboard=True
)

user_state = {}  # chat_id -> "income"/"expense"

# ==== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ====
async def init_db():
    conn = await asyncpg.connect(DATABASE_URL)
    return conn

async def init_table(conn, chat_id):
    table_name = f"transactions_{str(chat_id).replace('-', '')}"
    await conn.execute(f"""
        CREATE TABLE IF NOT EXISTS {table_name} (
            id SERIAL PRIMARY KEY,
            type TEXT,
            amount REAL,
            category TEXT,
            date TIMESTAMP DEFAULT NOW()
        )
    """)
    return table_name

# ==== –ë–û–¢ ====
bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    conn = await init_db()
    await init_table(conn, message.chat.id)
    await conn.close()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ üíµ", reply_markup=main_kb)

@dp.message(F.text == "üí∞ –î–æ—Ö–æ–¥")
async def income_start(message: types.Message):
    user_state[message.chat.id] = "income"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 –ó–∞—Ä–ø–ª–∞—Ç–∞)")

@dp.message(F.text == "üí∏ –†–∞—Å—Ö–æ–¥")
async def expense_start(message: types.Message):
    user_state[message.chat.id] = "expense"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1200 –ü—Ä–æ–¥—É–∫—Ç—ã)")

@dp.message(F.text == "üìä –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    conn = await init_db()
    table = await init_table(conn, message.chat.id)

    total_income = await conn.fetchval(f"SELECT SUM(amount) FROM {table} WHERE type='income'")
    total_expense = await conn.fetchval(f"SELECT SUM(amount) FROM {table} WHERE type='expense'")
    await conn.close()

    balance = (total_income or 0) - (total_expense or 0)
    await message.answer(f"üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} ‚Ç∏")

@dp.message(F.text == "üóì –û—Å—Ç–∞—Ç–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º")
async def monthly_stats(message: types.Message):
    conn = await init_db()
    table = await init_table(conn, message.chat.id)

    rows = await conn.fetch(f"""
        SELECT to_char(date, 'YYYY-MM') as period,
               SUM(CASE WHEN type='income' THEN amount ELSE 0 END) as income,
               SUM(CASE WHEN type='expense' THEN amount ELSE 0 END) as expense
        FROM {table}
        GROUP BY period
        ORDER BY period
    """)
    await conn.close()

    if not rows:
        await message.answer("–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç üì≠")
        return

    text = ""
    for row in rows:
        balance = (row['income'] or 0) - (row['expense'] or 0)
        text += f"üìÖ {row['period']}\n–î–æ—Ö–æ–¥: +{row['income']:.2f} ‚Ç∏\n–†–∞—Å—Ö–æ–¥: -{row['expense']:.2f} ‚Ç∏\n–û—Å—Ç–∞—Ç–æ–∫: {balance:.2f} ‚Ç∏\n\n"
    await message.answer(text)

@dp.message()
async def handle_amount(message: types.Message):
    if message.chat.id not in user_state:
        return

    try:
        parts = message.text.split(maxsplit=1)
        amount = float(parts[0])
        category = parts[1] if len(parts) > 1 else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

        t_type = user_state.pop(message.chat.id)
        conn = await init_db()
        table = await init_table(conn, message.chat.id)

        await conn.execute(
            f"INSERT INTO {table} (type, amount, category) VALUES ($1, $2, $3)",
            t_type, amount, category
        )
        await conn.close()
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount:.2f} ‚Ç∏ ({category})")
    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: 5000 –ó–∞—Ä–ø–ª–∞—Ç–∞")

# ==== –ó–ê–ü–£–°–ö ====
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
