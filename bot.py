import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
TOKEN = "8371020691:AAFdajHmJH00rLquuc_OEJB8ngqaVvTvTq8"

# ==== –°–û–ó–î–ê–Å–ú –ë–ê–ó–£ ====
conn = sqlite3.connect("finance.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    type TEXT, -- income / expense
    amount REAL,
    category TEXT,
    date TEXT
)
""")
conn.commit()

# ==== –ö–ù–û–ü–ö–ò ====
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí∞ –î–æ—Ö–æ–¥"), KeyboardButton(text="üí∏ –†–∞—Å—Ö–æ–¥")],
        [KeyboardButton(text="üìä –ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="üóì –û—Å—Ç–∞—Ç–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º")]
    ],
    resize_keyboard=True
)

# ==== –°–û–°–¢–û–Ø–ù–ò–ï –í–í–û–î–ê ====
user_state = {}  # user_id -> "income" / "expense"

# ==== –õ–û–ì–ò–ö–ê –ë–û–¢–ê ====
bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ üíµ", reply_markup=main_kb)

@dp.message(F.text == "üí∞ –î–æ—Ö–æ–¥")
async def income_start(message: types.Message):
    user_state[message.from_user.id] = "income"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 –ó–∞—Ä–ø–ª–∞—Ç–∞)")

@dp.message(F.text == "üí∏ –†–∞—Å—Ö–æ–¥")
async def expense_start(message: types.Message):
    user_state[message.from_user.id] = "expense"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1200 –ü—Ä–æ–¥—É–∫—Ç—ã)")

@dp.message(F.text == "üìä –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    cursor.execute("SELECT SUM(amount) FROM transactions WHERE type='income'")
    total_income = cursor.fetchone()[0] or 0

    cursor.execute("SELECT SUM(amount) FROM transactions WHERE type='expense'")
    total_expense = cursor.fetchone()[0] or 0

    balance = total_income - total_expense
    await message.answer(f"üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} ‚Ç∏")

@dp.message(F.text == "üóì –û—Å—Ç–∞—Ç–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º")
async def monthly_stats(message: types.Message):
    cursor.execute("""
        SELECT strftime('%Y-%m', date) as period,
               SUM(CASE WHEN type='income' THEN amount ELSE 0 END) as income,
               SUM(CASE WHEN type='expense' THEN amount ELSE 0 END) as expense
        FROM transactions
        GROUP BY period
        ORDER BY period
    """)
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç üì≠")
        return

    text = ""
    for period, income, expense in rows:
        balance = (income or 0) - (expense or 0)
        text += f"üìÖ {period}\n–î–æ—Ö–æ–¥: +{income:.2f} ‚Ç∏\n–†–∞—Å—Ö–æ–¥: -{expense:.2f} ‚Ç∏\n–û—Å—Ç–∞—Ç–æ–∫: {balance:.2f} ‚Ç∏\n\n"
    await message.answer(text)

@dp.message()
async def handle_amount(message: types.Message):
    if message.from_user.id not in user_state:
        return  # –∏–≥–Ω–æ—Ä, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∂–¥–µ—Ç –≤–≤–æ–¥–∞ —Å—É–º–º—ã

    try:
        parts = message.text.split(maxsplit=1)
        amount = float(parts[0])
        category = parts[1] if len(parts) > 1 else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

        t_type = user_state.pop(message.from_user.id)
        cursor.execute(
            "INSERT INTO transactions (type, amount, category, date) VALUES (?, ?, ?, datetime('now'))",
            (t_type, amount, category)
        )
        conn.commit()
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount:.2f} ‚Ç∏ ({category})")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: 5000 –ó–∞—Ä–ø–ª–∞—Ç–∞")

# ==== –ó–ê–ü–£–°–ö ====
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
